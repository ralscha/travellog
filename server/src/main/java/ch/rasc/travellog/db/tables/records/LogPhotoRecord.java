/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables.records;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import ch.rasc.travellog.db.tables.LogPhoto;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.12.3" },
    comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogPhotoRecord extends UpdatableRecordImpl<LogPhotoRecord>
    implements Record7<Long, String, String, String, Integer, Long, LocalDateTime> {

  private static final long serialVersionUID = 1530560244;

  /**
   * Setter for <code>log_photo.id</code>.
   */
  public void setId(Long value) {
    set(0, value);
  }

  /**
   * Getter for <code>log_photo.id</code>.
   */
  public Long getId() {
    return (Long) get(0);
  }

  /**
   * Setter for <code>log_photo.subject</code>.
   */
  public void setSubject(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>log_photo.subject</code>.
   */
  public String getSubject() {
    return (String) get(1);
  }

  /**
   * Setter for <code>log_photo.name</code>.
   */
  public void setName(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>log_photo.name</code>.
   */
  public String getName() {
    return (String) get(2);
  }

  /**
   * Setter for <code>log_photo.mime_type</code>.
   */
  public void setMimeType(String value) {
    set(3, value);
  }

  /**
   * Getter for <code>log_photo.mime_type</code>.
   */
  public String getMimeType() {
    return (String) get(3);
  }

  /**
   * Setter for <code>log_photo.size</code>.
   */
  public void setSize(Integer value) {
    set(4, value);
  }

  /**
   * Getter for <code>log_photo.size</code>.
   */
  public Integer getSize() {
    return (Integer) get(4);
  }

  /**
   * Setter for <code>log_photo.log_id</code>.
   */
  public void setLogId(Long value) {
    set(5, value);
  }

  /**
   * Getter for <code>log_photo.log_id</code>.
   */
  public Long getLogId() {
    return (Long) get(5);
  }

  /**
   * Setter for <code>log_photo.updated</code>.
   */
  public void setUpdated(LocalDateTime value) {
    set(6, value);
  }

  /**
   * Getter for <code>log_photo.updated</code>.
   */
  public LocalDateTime getUpdated() {
    return (LocalDateTime) get(6);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<Long> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row7<Long, String, String, String, Integer, Long, LocalDateTime> fieldsRow() {
    return (Row7) super.fieldsRow();
  }

  @Override
  public Row7<Long, String, String, String, Integer, Long, LocalDateTime> valuesRow() {
    return (Row7) super.valuesRow();
  }

  @Override
  public Field<Long> field1() {
    return LogPhoto.LOG_PHOTO.ID;
  }

  @Override
  public Field<String> field2() {
    return LogPhoto.LOG_PHOTO.SUBJECT;
  }

  @Override
  public Field<String> field3() {
    return LogPhoto.LOG_PHOTO.NAME;
  }

  @Override
  public Field<String> field4() {
    return LogPhoto.LOG_PHOTO.MIME_TYPE;
  }

  @Override
  public Field<Integer> field5() {
    return LogPhoto.LOG_PHOTO.SIZE;
  }

  @Override
  public Field<Long> field6() {
    return LogPhoto.LOG_PHOTO.LOG_ID;
  }

  @Override
  public Field<LocalDateTime> field7() {
    return LogPhoto.LOG_PHOTO.UPDATED;
  }

  @Override
  public Long component1() {
    return getId();
  }

  @Override
  public String component2() {
    return getSubject();
  }

  @Override
  public String component3() {
    return getName();
  }

  @Override
  public String component4() {
    return getMimeType();
  }

  @Override
  public Integer component5() {
    return getSize();
  }

  @Override
  public Long component6() {
    return getLogId();
  }

  @Override
  public LocalDateTime component7() {
    return getUpdated();
  }

  @Override
  public Long value1() {
    return getId();
  }

  @Override
  public String value2() {
    return getSubject();
  }

  @Override
  public String value3() {
    return getName();
  }

  @Override
  public String value4() {
    return getMimeType();
  }

  @Override
  public Integer value5() {
    return getSize();
  }

  @Override
  public Long value6() {
    return getLogId();
  }

  @Override
  public LocalDateTime value7() {
    return getUpdated();
  }

  @Override
  public LogPhotoRecord value1(Long value) {
    setId(value);
    return this;
  }

  @Override
  public LogPhotoRecord value2(String value) {
    setSubject(value);
    return this;
  }

  @Override
  public LogPhotoRecord value3(String value) {
    setName(value);
    return this;
  }

  @Override
  public LogPhotoRecord value4(String value) {
    setMimeType(value);
    return this;
  }

  @Override
  public LogPhotoRecord value5(Integer value) {
    setSize(value);
    return this;
  }

  @Override
  public LogPhotoRecord value6(Long value) {
    setLogId(value);
    return this;
  }

  @Override
  public LogPhotoRecord value7(LocalDateTime value) {
    setUpdated(value);
    return this;
  }

  @Override
  public LogPhotoRecord values(Long value1, String value2, String value3, String value4,
      Integer value5, Long value6, LocalDateTime value7) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    value6(value6);
    value7(value7);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached LogPhotoRecord
   */
  public LogPhotoRecord() {
    super(LogPhoto.LOG_PHOTO);
  }

  /**
   * Create a detached, initialised LogPhotoRecord
   */
  public LogPhotoRecord(Long id, String subject, String name, String mimeType,
      Integer size, Long logId, LocalDateTime updated) {
    super(LogPhoto.LOG_PHOTO);

    set(0, id);
    set(1, subject);
    set(2, name);
    set(3, mimeType);
    set(4, size);
    set(5, logId);
    set(6, updated);
  }
}
