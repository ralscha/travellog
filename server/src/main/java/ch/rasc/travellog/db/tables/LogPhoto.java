/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ch.rasc.travellog.db.DefaultSchema;
import ch.rasc.travellog.db.Indexes;
import ch.rasc.travellog.db.Keys;
import ch.rasc.travellog.db.tables.records.LogPhotoRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogPhoto extends TableImpl<LogPhotoRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>log_photo</code>
	 */
	public static final LogPhoto LOG_PHOTO = new LogPhoto();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<LogPhotoRecord> getRecordType() {
		return LogPhotoRecord.class;
	}

	/**
	 * The column <code>log_photo.id</code>.
	 */
	public final TableField<LogPhotoRecord, Long> ID = createField(DSL.name("id"),
			SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>log_photo.subject</code>.
	 */
	public final TableField<LogPhotoRecord, String> SUBJECT = createField(
			DSL.name("subject"),
			SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)),
			this, "");

	/**
	 * The column <code>log_photo.name</code>.
	 */
	public final TableField<LogPhotoRecord, String> NAME = createField(DSL.name("name"),
			SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>log_photo.mime_type</code>.
	 */
	public final TableField<LogPhotoRecord, String> MIME_TYPE = createField(
			DSL.name("mime_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>log_photo.size</code>.
	 */
	public final TableField<LogPhotoRecord, Integer> SIZE = createField(DSL.name("size"),
			SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>log_photo.log_id</code>.
	 */
	public final TableField<LogPhotoRecord, Long> LOG_ID = createField(DSL.name("log_id"),
			SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>log_photo.updated</code>.
	 */
	public final TableField<LogPhotoRecord, LocalDateTime> UPDATED = createField(
			DSL.name("updated"),
			SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(
					DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)),
			this, "");

	/**
	 * The column <code>log_photo.lat</code>.
	 */
	public final TableField<LogPhotoRecord, BigDecimal> LAT = createField(DSL.name("lat"),
			SQLDataType.DECIMAL(10, 8)
					.defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)),
			this, "");

	/**
	 * The column <code>log_photo.lng</code>.
	 */
	public final TableField<LogPhotoRecord, BigDecimal> LNG = createField(DSL.name("lng"),
			SQLDataType.DECIMAL(11, 8)
					.defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)),
			this, "");

	/**
	 * The column <code>log_photo.thumbnail</code>.
	 */
	public final TableField<LogPhotoRecord, byte[]> THUMBNAIL = createField(
			DSL.name("thumbnail"), SQLDataType.BLOB.nullable(false), this, "");

	/**
	 * The column <code>log_photo.storage</code>.
	 */
	public final TableField<LogPhotoRecord, String> STORAGE = createField(
			DSL.name("storage"), SQLDataType.VARCHAR(22).nullable(false), this, "");

	private LogPhoto(Name alias, Table<LogPhotoRecord> aliased) {
		this(alias, aliased, null);
	}

	private LogPhoto(Name alias, Table<LogPhotoRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>log_photo</code> table reference
	 */
	public LogPhoto(String alias) {
		this(DSL.name(alias), LOG_PHOTO);
	}

	/**
	 * Create an aliased <code>log_photo</code> table reference
	 */
	public LogPhoto(Name alias) {
		this(alias, LOG_PHOTO);
	}

	/**
	 * Create a <code>log_photo</code> table reference
	 */
	public LogPhoto() {
		this(DSL.name("log_photo"), null);
	}

	public <O extends Record> LogPhoto(Table<O> child,
			ForeignKey<O, LogPhotoRecord> key) {
		super(child, key, LOG_PHOTO);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.LOG_PHOTO_LOG_ID);
	}

	@Override
	public Identity<LogPhotoRecord, Long> getIdentity() {
		return (Identity<LogPhotoRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<LogPhotoRecord> getPrimaryKey() {
		return Keys.KEY_LOG_PHOTO_PRIMARY;
	}

	@Override
	public List<ForeignKey<LogPhotoRecord, ?>> getReferences() {
		return Arrays.asList(Keys.LOG_PHOTO_IBFK_1);
	}

	private transient Log _log;

	/**
	 * Get the implicit join path to the <code>travellog.log</code> table.
	 */
	public Log log() {
		if (this._log == null) {
			this._log = new Log(this, Keys.LOG_PHOTO_IBFK_1);
		}

		return this._log;
	}

	@Override
	public LogPhoto as(String alias) {
		return new LogPhoto(DSL.name(alias), this);
	}

	@Override
	public LogPhoto as(Name alias) {
		return new LogPhoto(alias, this);
	}

	@Override
	public LogPhoto as(Table<?> alias) {
		return new LogPhoto(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public LogPhoto rename(String name) {
		return new LogPhoto(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public LogPhoto rename(Name name) {
		return new LogPhoto(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public LogPhoto rename(Table<?> name) {
		return new LogPhoto(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row11 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row11<Long, String, String, String, Integer, Long, LocalDateTime, BigDecimal, BigDecimal, byte[], String> fieldsRow() {
		return (Row11) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(
			Function11<? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? super LocalDateTime, ? super BigDecimal, ? super BigDecimal, ? super byte[], ? super String, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType,
			Function11<? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? super LocalDateTime, ? super BigDecimal, ? super BigDecimal, ? super byte[], ? super String, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
