/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables;


import ch.rasc.travellog.db.DefaultSchema;
import ch.rasc.travellog.db.Indexes;
import ch.rasc.travellog.db.Keys;
import ch.rasc.travellog.db.tables.records.AppSessionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppSession extends TableImpl<AppSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>app_session</code>
     */
    public static final AppSession APP_SESSION = new AppSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppSessionRecord> getRecordType() {
        return AppSessionRecord.class;
    }

    /**
     * The column <code>app_session.id</code>.
     */
    public final TableField<AppSessionRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(35).nullable(false), this, "");

    /**
     * The column <code>app_session.app_user_id</code>.
     */
    public final TableField<AppSessionRecord, Long> APP_USER_ID = createField(DSL.name("app_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>app_session.last_access</code>.
     */
    public final TableField<AppSessionRecord, LocalDateTime> LAST_ACCESS = createField(DSL.name("last_access"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>app_session.ip</code>.
     */
    public final TableField<AppSessionRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(39).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>app_session.user_agent</code>.
     */
    public final TableField<AppSessionRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private AppSession(Name alias, Table<AppSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppSession(Name alias, Table<AppSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>app_session</code> table reference
     */
    public AppSession(String alias) {
        this(DSL.name(alias), APP_SESSION);
    }

    /**
     * Create an aliased <code>app_session</code> table reference
     */
    public AppSession(Name alias) {
        this(alias, APP_SESSION);
    }

    /**
     * Create a <code>app_session</code> table reference
     */
    public AppSession() {
        this(DSL.name("app_session"), null);
    }

    public <O extends Record> AppSession(Table<O> child, ForeignKey<O, AppSessionRecord> key) {
        super(child, key, APP_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.APP_SESSION_APP_USER_ID);
    }

    @Override
    public UniqueKey<AppSessionRecord> getPrimaryKey() {
        return Keys.KEY_APP_SESSION_PRIMARY;
    }

    @Override
    public List<ForeignKey<AppSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APP_SESSION_IBFK_1);
    }

    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>travellog.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.APP_SESSION_IBFK_1);

        return _appUser;
    }

    @Override
    public AppSession as(String alias) {
        return new AppSession(DSL.name(alias), this);
    }

    @Override
    public AppSession as(Name alias) {
        return new AppSession(alias, this);
    }

    @Override
    public AppSession as(Table<?> alias) {
        return new AppSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppSession rename(String name) {
        return new AppSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppSession rename(Name name) {
        return new AppSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppSession rename(Table<?> name) {
        return new AppSession(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Long, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
