/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables.records;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import ch.rasc.travellog.db.tables.Log;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogRecord extends UpdatableRecordImpl<LogRecord> implements
		Record8<Long, LocalDateTime, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> {

	private static final long serialVersionUID = 1L;

	/**
	 * Setter for <code>log.id</code>.
	 */
	public void setId(Long value) {
		set(0, value);
	}

	/**
	 * Getter for <code>log.id</code>.
	 */
	public Long getId() {
		return (Long) get(0);
	}

	/**
	 * Setter for <code>log.created</code>.
	 */
	public void setCreated(LocalDateTime value) {
		set(1, value);
	}

	/**
	 * Getter for <code>log.created</code>.
	 */
	public LocalDateTime getCreated() {
		return (LocalDateTime) get(1);
	}

	/**
	 * Setter for <code>log.lat</code>.
	 */
	public void setLat(BigDecimal value) {
		set(2, value);
	}

	/**
	 * Getter for <code>log.lat</code>.
	 */
	public BigDecimal getLat() {
		return (BigDecimal) get(2);
	}

	/**
	 * Setter for <code>log.lng</code>.
	 */
	public void setLng(BigDecimal value) {
		set(3, value);
	}

	/**
	 * Getter for <code>log.lng</code>.
	 */
	public BigDecimal getLng() {
		return (BigDecimal) get(3);
	}

	/**
	 * Setter for <code>log.location</code>.
	 */
	public void setLocation(String value) {
		set(4, value);
	}

	/**
	 * Getter for <code>log.location</code>.
	 */
	public String getLocation() {
		return (String) get(4);
	}

	/**
	 * Setter for <code>log.report</code>.
	 */
	public void setReport(String value) {
		set(5, value);
	}

	/**
	 * Getter for <code>log.report</code>.
	 */
	public String getReport() {
		return (String) get(5);
	}

	/**
	 * Setter for <code>log.travel_id</code>.
	 */
	public void setTravelId(Long value) {
		set(6, value);
	}

	/**
	 * Getter for <code>log.travel_id</code>.
	 */
	public Long getTravelId() {
		return (Long) get(6);
	}

	/**
	 * Setter for <code>log.updated</code>.
	 */
	public void setUpdated(LocalDateTime value) {
		set(7, value);
	}

	/**
	 * Getter for <code>log.updated</code>.
	 */
	public LocalDateTime getUpdated() {
		return (LocalDateTime) get(7);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	@Override
	public Row8<Long, LocalDateTime, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> fieldsRow() {
		return (Row8) super.fieldsRow();
	}

	@Override
	public Row8<Long, LocalDateTime, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> valuesRow() {
		return (Row8) super.valuesRow();
	}

	@Override
	public Field<Long> field1() {
		return Log.LOG.ID;
	}

	@Override
	public Field<LocalDateTime> field2() {
		return Log.LOG.CREATED;
	}

	@Override
	public Field<BigDecimal> field3() {
		return Log.LOG.LAT;
	}

	@Override
	public Field<BigDecimal> field4() {
		return Log.LOG.LNG;
	}

	@Override
	public Field<String> field5() {
		return Log.LOG.LOCATION;
	}

	@Override
	public Field<String> field6() {
		return Log.LOG.REPORT;
	}

	@Override
	public Field<Long> field7() {
		return Log.LOG.TRAVEL_ID;
	}

	@Override
	public Field<LocalDateTime> field8() {
		return Log.LOG.UPDATED;
	}

	@Override
	public Long component1() {
		return getId();
	}

	@Override
	public LocalDateTime component2() {
		return getCreated();
	}

	@Override
	public BigDecimal component3() {
		return getLat();
	}

	@Override
	public BigDecimal component4() {
		return getLng();
	}

	@Override
	public String component5() {
		return getLocation();
	}

	@Override
	public String component6() {
		return getReport();
	}

	@Override
	public Long component7() {
		return getTravelId();
	}

	@Override
	public LocalDateTime component8() {
		return getUpdated();
	}

	@Override
	public Long value1() {
		return getId();
	}

	@Override
	public LocalDateTime value2() {
		return getCreated();
	}

	@Override
	public BigDecimal value3() {
		return getLat();
	}

	@Override
	public BigDecimal value4() {
		return getLng();
	}

	@Override
	public String value5() {
		return getLocation();
	}

	@Override
	public String value6() {
		return getReport();
	}

	@Override
	public Long value7() {
		return getTravelId();
	}

	@Override
	public LocalDateTime value8() {
		return getUpdated();
	}

	@Override
	public LogRecord value1(Long value) {
		setId(value);
		return this;
	}

	@Override
	public LogRecord value2(LocalDateTime value) {
		setCreated(value);
		return this;
	}

	@Override
	public LogRecord value3(BigDecimal value) {
		setLat(value);
		return this;
	}

	@Override
	public LogRecord value4(BigDecimal value) {
		setLng(value);
		return this;
	}

	@Override
	public LogRecord value5(String value) {
		setLocation(value);
		return this;
	}

	@Override
	public LogRecord value6(String value) {
		setReport(value);
		return this;
	}

	@Override
	public LogRecord value7(Long value) {
		setTravelId(value);
		return this;
	}

	@Override
	public LogRecord value8(LocalDateTime value) {
		setUpdated(value);
		return this;
	}

	@Override
	public LogRecord values(Long value1, LocalDateTime value2, BigDecimal value3,
			BigDecimal value4, String value5, String value6, Long value7,
			LocalDateTime value8) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached LogRecord
	 */
	public LogRecord() {
		super(Log.LOG);
	}

	/**
	 * Create a detached, initialised LogRecord
	 */
	public LogRecord(Long id, LocalDateTime created, BigDecimal lat, BigDecimal lng,
			String location, String report, Long travelId, LocalDateTime updated) {
		super(Log.LOG);

		setId(id);
		setCreated(created);
		setLat(lat);
		setLng(lng);
		setLocation(location);
		setReport(report);
		setTravelId(travelId);
		setUpdated(updated);
	}
}
