/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ch.rasc.travellog.db.DefaultSchema;
import ch.rasc.travellog.db.Indexes;
import ch.rasc.travellog.db.Keys;
import ch.rasc.travellog.db.tables.records.TravelRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Travel extends TableImpl<TravelRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>travel</code>
	 */
	public static final Travel TRAVEL = new Travel();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TravelRecord> getRecordType() {
		return TravelRecord.class;
	}

	/**
	 * The column <code>travel.id</code>.
	 */
	public final TableField<TravelRecord, Long> ID = createField(DSL.name("id"),
			SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>travel.name</code>.
	 */
	public final TableField<TravelRecord, String> NAME = createField(DSL.name("name"),
			SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>travel.app_user_id</code>.
	 */
	public final TableField<TravelRecord, Long> APP_USER_ID = createField(
			DSL.name("app_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>travel.updated</code>.
	 */
	public final TableField<TravelRecord, LocalDateTime> UPDATED = createField(
			DSL.name("updated"),
			SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(
					DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)),
			this, "");

	private Travel(Name alias, Table<TravelRecord> aliased) {
		this(alias, aliased, null);
	}

	private Travel(Name alias, Table<TravelRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>travel</code> table reference
	 */
	public Travel(String alias) {
		this(DSL.name(alias), TRAVEL);
	}

	/**
	 * Create an aliased <code>travel</code> table reference
	 */
	public Travel(Name alias) {
		this(alias, TRAVEL);
	}

	/**
	 * Create a <code>travel</code> table reference
	 */
	public Travel() {
		this(DSL.name("travel"), null);
	}

	public <O extends Record> Travel(Table<O> child, ForeignKey<O, TravelRecord> key) {
		super(child, key, TRAVEL);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.TRAVEL_APP_USER_ID);
	}

	@Override
	public Identity<TravelRecord, Long> getIdentity() {
		return (Identity<TravelRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<TravelRecord> getPrimaryKey() {
		return Keys.KEY_TRAVEL_PRIMARY;
	}

	@Override
	public List<ForeignKey<TravelRecord, ?>> getReferences() {
		return Arrays.asList(Keys.TRAVEL_IBFK_1);
	}

	private transient AppUser _appUser;

	/**
	 * Get the implicit join path to the <code>travellog.app_user</code> table.
	 */
	public AppUser appUser() {
		if (this._appUser == null) {
			this._appUser = new AppUser(this, Keys.TRAVEL_IBFK_1);
		}

		return this._appUser;
	}

	@Override
	public Travel as(String alias) {
		return new Travel(DSL.name(alias), this);
	}

	@Override
	public Travel as(Name alias) {
		return new Travel(alias, this);
	}

	@Override
	public Travel as(Table<?> alias) {
		return new Travel(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Travel rename(String name) {
		return new Travel(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Travel rename(Name name) {
		return new Travel(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Travel rename(Table<?> name) {
		return new Travel(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row4 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row4<Long, String, Long, LocalDateTime> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(
			Function4<? super Long, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType,
			Function4<? super Long, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
