/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables;


import ch.rasc.travellog.db.DefaultSchema;
import ch.rasc.travellog.db.Indexes;
import ch.rasc.travellog.db.Keys;
import ch.rasc.travellog.db.tables.records.TravelRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Travel extends TableImpl<TravelRecord> {

    private static final long serialVersionUID = -112680946;

    /**
     * The reference instance of <code>travel</code>
     */
    public static final Travel TRAVEL = new Travel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TravelRecord> getRecordType() {
        return TravelRecord.class;
    }

    /**
     * The column <code>travel.id</code>.
     */
    public final TableField<TravelRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>travel.name</code>.
     */
    public final TableField<TravelRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>travel.app_user_id</code>.
     */
    public final TableField<TravelRecord, Long> APP_USER_ID = createField(DSL.name("app_user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>travel.updated</code>.
     */
    public final TableField<TravelRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>travel</code> table reference
     */
    public Travel() {
        this(DSL.name("travel"), null);
    }

    /**
     * Create an aliased <code>travel</code> table reference
     */
    public Travel(String alias) {
        this(DSL.name(alias), TRAVEL);
    }

    /**
     * Create an aliased <code>travel</code> table reference
     */
    public Travel(Name alias) {
        this(alias, TRAVEL);
    }

    private Travel(Name alias, Table<TravelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Travel(Name alias, Table<TravelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Travel(Table<O> child, ForeignKey<O, TravelRecord> key) {
        super(child, key, TRAVEL);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAVEL_APP_USER_ID, Indexes.TRAVEL_PRIMARY);
    }

    @Override
    public Identity<TravelRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRAVEL;
    }

    @Override
    public UniqueKey<TravelRecord> getPrimaryKey() {
        return Keys.KEY_TRAVEL_PRIMARY;
    }

    @Override
    public List<UniqueKey<TravelRecord>> getKeys() {
        return Arrays.<UniqueKey<TravelRecord>>asList(Keys.KEY_TRAVEL_PRIMARY);
    }

    @Override
    public List<ForeignKey<TravelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TravelRecord, ?>>asList(Keys.TRAVEL_IBFK_1);
    }

    public AppUser appUser() {
        return new AppUser(this, Keys.TRAVEL_IBFK_1);
    }

    @Override
    public Travel as(String alias) {
        return new Travel(DSL.name(alias), this);
    }

    @Override
    public Travel as(Name alias) {
        return new Travel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Travel rename(String name) {
        return new Travel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Travel rename(Name name) {
        return new Travel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
