/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ch.rasc.travellog.db.DefaultSchema;
import ch.rasc.travellog.db.Indexes;
import ch.rasc.travellog.db.Keys;
import ch.rasc.travellog.db.tables.records.LogRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Log extends TableImpl<LogRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>log</code>
	 */
	public static final Log LOG = new Log();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<LogRecord> getRecordType() {
		return LogRecord.class;
	}

	/**
	 * The column <code>log.id</code>.
	 */
	public final TableField<LogRecord, Long> ID = createField(DSL.name("id"),
			SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>log.created</code>.
	 */
	public final TableField<LogRecord, LocalDateTime> CREATED = createField(
			DSL.name("created"),
			SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(
					DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)),
			this, "");

	/**
	 * The column <code>log.lat</code>.
	 */
	public final TableField<LogRecord, BigDecimal> LAT = createField(DSL.name("lat"),
			SQLDataType.DECIMAL(10, 8).nullable(false), this, "");

	/**
	 * The column <code>log.lng</code>.
	 */
	public final TableField<LogRecord, BigDecimal> LNG = createField(DSL.name("lng"),
			SQLDataType.DECIMAL(11, 8).nullable(false), this, "");

	/**
	 * The column <code>log.location</code>.
	 */
	public final TableField<LogRecord, String> LOCATION = createField(
			DSL.name("location"),
			SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)),
			this, "");

	/**
	 * The column <code>log.report</code>.
	 */
	public final TableField<LogRecord, String> REPORT = createField(DSL.name("report"),
			SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

	/**
	 * The column <code>log.travel_id</code>.
	 */
	public final TableField<LogRecord, Long> TRAVEL_ID = createField(
			DSL.name("travel_id"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>log.updated</code>.
	 */
	public final TableField<LogRecord, LocalDateTime> UPDATED = createField(
			DSL.name("updated"),
			SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(
					DSL.field("'0000-00-00 00:00:00'", SQLDataType.LOCALDATETIME)),
			this, "");

	private Log(Name alias, Table<LogRecord> aliased) {
		this(alias, aliased, null);
	}

	private Log(Name alias, Table<LogRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>log</code> table reference
	 */
	public Log(String alias) {
		this(DSL.name(alias), LOG);
	}

	/**
	 * Create an aliased <code>log</code> table reference
	 */
	public Log(Name alias) {
		this(alias, LOG);
	}

	/**
	 * Create a <code>log</code> table reference
	 */
	public Log() {
		this(DSL.name("log"), null);
	}

	public <O extends Record> Log(Table<O> child, ForeignKey<O, LogRecord> key) {
		super(child, key, LOG);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.LOG_TRAVEL_ID);
	}

	@Override
	public Identity<LogRecord, Long> getIdentity() {
		return (Identity<LogRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<LogRecord> getPrimaryKey() {
		return Keys.KEY_LOG_PRIMARY;
	}

	@Override
	public List<ForeignKey<LogRecord, ?>> getReferences() {
		return Arrays.asList(Keys.LOG_IBFK_1);
	}

	private transient Travel _travel;

	/**
	 * Get the implicit join path to the <code>travellog.travel</code> table.
	 */
	public Travel travel() {
		if (this._travel == null) {
			this._travel = new Travel(this, Keys.LOG_IBFK_1);
		}

		return this._travel;
	}

	@Override
	public Log as(String alias) {
		return new Log(DSL.name(alias), this);
	}

	@Override
	public Log as(Name alias) {
		return new Log(alias, this);
	}

	@Override
	public Log as(Table<?> alias) {
		return new Log(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Log rename(String name) {
		return new Log(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Log rename(Name name) {
		return new Log(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Log rename(Table<?> name) {
		return new Log(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row8 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row8<Long, LocalDateTime, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> fieldsRow() {
		return (Row8) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(
			Function8<? super Long, ? super LocalDateTime, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType,
			Function8<? super Long, ? super LocalDateTime, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
