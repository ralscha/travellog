/*
 * This file is generated by jOOQ.
 */
package ch.rasc.travellog.db.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.travellog.db.DefaultSchema;
import ch.rasc.travellog.db.Indexes;
import ch.rasc.travellog.db.Keys;
import ch.rasc.travellog.db.tables.records.LogRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.12.3" },
    comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Log extends TableImpl<LogRecord> {

  private static final long serialVersionUID = 1308215506;

  /**
   * The reference instance of <code>log</code>
   */
  public static final Log LOG = new Log();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<LogRecord> getRecordType() {
    return LogRecord.class;
  }

  /**
   * The column <code>log.id</code>.
   */
  public final TableField<LogRecord, Long> ID = createField(DSL.name("id"),
      org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /**
   * The column <code>log.created</code>.
   */
  public final TableField<LogRecord, LocalDateTime> CREATED = createField(
      DSL.name("created"),
      org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false)
          .defaultValue(org.jooq.impl.DSL.field("current_timestamp()",
              org.jooq.impl.SQLDataType.LOCALDATETIME)),
      this, "");

  /**
   * The column <code>log.lat</code>.
   */
  public final TableField<LogRecord, BigDecimal> LAT = createField(DSL.name("lat"),
      org.jooq.impl.SQLDataType.DECIMAL(10, 8).nullable(false), this, "");

  /**
   * The column <code>log.lng</code>.
   */
  public final TableField<LogRecord, BigDecimal> LNG = createField(DSL.name("lng"),
      org.jooq.impl.SQLDataType.DECIMAL(11, 8).nullable(false), this, "");

  /**
   * The column <code>log.location</code>.
   */
  public final TableField<LogRecord, String> LOCATION = createField(DSL.name("location"),
      org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(
          org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)),
      this, "");

  /**
   * The column <code>log.report</code>.
   */
  public final TableField<LogRecord, String> REPORT = createField(DSL.name("report"),
      org.jooq.impl.SQLDataType.CLOB.defaultValue(
          org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)),
      this, "");

  /**
   * The column <code>log.travel_id</code>.
   */
  public final TableField<LogRecord, Long> TRAVEL_ID = createField(DSL.name("travel_id"),
      org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * The column <code>log.updated</code>.
   */
  public final TableField<LogRecord, LocalDateTime> UPDATED = createField(
      DSL.name("updated"),
      org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false)
          .defaultValue(org.jooq.impl.DSL.field("'0000-00-00 00:00:00'",
              org.jooq.impl.SQLDataType.LOCALDATETIME)),
      this, "");

  /**
   * Create a <code>log</code> table reference
   */
  public Log() {
    this(DSL.name("log"), null);
  }

  /**
   * Create an aliased <code>log</code> table reference
   */
  public Log(String alias) {
    this(DSL.name(alias), LOG);
  }

  /**
   * Create an aliased <code>log</code> table reference
   */
  public Log(Name alias) {
    this(alias, LOG);
  }

  private Log(Name alias, Table<LogRecord> aliased) {
    this(alias, aliased, null);
  }

  private Log(Name alias, Table<LogRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Log(Table<O> child, ForeignKey<O, LogRecord> key) {
    super(child, key, LOG);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.LOG_PRIMARY, Indexes.LOG_TRAVEL_ID);
  }

  @Override
  public Identity<LogRecord, Long> getIdentity() {
    return Keys.IDENTITY_LOG;
  }

  @Override
  public UniqueKey<LogRecord> getPrimaryKey() {
    return Keys.KEY_LOG_PRIMARY;
  }

  @Override
  public List<UniqueKey<LogRecord>> getKeys() {
    return Arrays.<UniqueKey<LogRecord>>asList(Keys.KEY_LOG_PRIMARY);
  }

  @Override
  public List<ForeignKey<LogRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<LogRecord, ?>>asList(Keys.LOG_IBFK_1);
  }

  public Travel travel() {
    return new Travel(this, Keys.LOG_IBFK_1);
  }

  @Override
  public Log as(String alias) {
    return new Log(DSL.name(alias), this);
  }

  @Override
  public Log as(Name alias) {
    return new Log(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Log rename(String name) {
    return new Log(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Log rename(Name name) {
    return new Log(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<Long, LocalDateTime, BigDecimal, BigDecimal, String, String, Long, LocalDateTime> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
